% Sphere dynamics with antipodally symmetric observation function
addpath('../matlab_code/GeometryTools');
addpath('../matlab_code/ripser');
addpath('../matlab_code/TDETools');
addpath('../matlab_code/samirFunctions');

sphere2xyz = @(theta, phi) [cos(theta)*cos(phi), sin(theta)*cos(phi), sin(phi) ];
dSphere = @(p1,p2) sqrt(sum((sphere2xyz(p1(1),p1(2)) -sphere2xyz(p2(1),p2(2))).^2));
dRp2 = @(p1,p2) sqrt(sum(min((sphere2xyz(p1(1),p1(2)) -sphere2xyz(p2(1),p2(2))).^2));
%% Define dynamical system
%Define observation function as cosine distance to some arbitrary point theta0
theta0 = 0.7;
phi0 = 0.2;
obsfn = @(theta, phi) abs(sum(sphere2xyz(theta0, phi0).*sphere2xyz(theta, phi)));
%obsfn = @(theta,phi) dSphere([theta,phi], [theta0,phi0]);
%Fill out a spiral trajectory on the sphere
NTotal = 600;
NPeriods = 30;
thetas = linspace(0, 2*pi*NPeriods, NTotal);
phis = linspace(-pi/2, pi/2 , NTotal);

%Apply observation function to trajectory points to get a time series x
x = zeros(NTotal, 1);
X = zeros(NTotal, 3);
for ii = 1:NTotal
    x(ii) = obsfn(thetas(ii), phis(ii));
    X(ii, :) = sphere2xyz(thetas(ii), phis(ii));
end


%% Perform Sliding Window Embedding
X = getSlidingWindowNoInterp(x, 20);
X_pca = getPCA(X); %Perform PCA on sliding window embedding
%X = getGreedyPerm(X, 300); % fps on embedding point cloud


[SWd, Md] = getDistanceMatrix([thetas; phis]', X, dSphere);

computeDistortion(Md,SWd)

X = unrollDistMat(SWd);
Y = unrollDistMat(Md);

D = SWd./Md;

subplot(131)
C = plotTimeColors(1:length(x), x, 'type', '2DLine');
subplot(132)
C = C(1:size(X_pca, 1), :);
scatter3(X_pca(:, 1), X_pca(:, 2), X_pca(:, 3), 20, C(:, 1:3), 'fill');
subplot(133)
scatter(Y,X, 2, 'filled');